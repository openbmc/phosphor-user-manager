// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <string>
#include <tuple>
#include <type_traits>
#include <sdbusplus/exception.hpp>
#include <phosphor-logging/log.hpp>
#include <phosphor-logging/elog.hpp>

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace User
{
namespace Account
{
namespace Password
{
namespace Error
{
    struct InvalidPassword;
} // namespace Error
} // namespace Password
} // namespace Account
} // namespace User
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace User
{
namespace Account
{
namespace Password
{
namespace Error
{
    struct UpdateFailure;
} // namespace Error
} // namespace Password
} // namespace Account
} // namespace User
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus


namespace phosphor
{

namespace logging
{


namespace xyz
{
namespace openbmc_project
{
namespace User
{
namespace Account
{
namespace Password
{
namespace _UpdateFailure
{

struct ERRNO
{
    static constexpr auto str = "ERRNO=%d";
    static constexpr auto str_short = "ERRNO";
    using type = std::tuple<std::decay_t<decltype(str)>,int32_t>;
    explicit constexpr ERRNO(int32_t a) : _entry(entry(str, a)) {};
    type _entry;
};
struct DESCRIPTION
{
    static constexpr auto str = "DESCRIPTION=%s";
    static constexpr auto str_short = "DESCRIPTION";
    using type = std::tuple<std::decay_t<decltype(str)>,const char*>;
    explicit constexpr DESCRIPTION(const char* a) : _entry(entry(str, a)) {};
    type _entry;
};

}  // namespace _UpdateFailure

struct UpdateFailure
{
    static constexpr auto L = level::ERR;
    using ERRNO = _UpdateFailure::ERRNO;
    using DESCRIPTION = _UpdateFailure::DESCRIPTION;
    using metadata_types = std::tuple<ERRNO, DESCRIPTION>;

};

} // namespace Password
} // namespace Account
} // namespace User
} // namespace openbmc_project
} // namespace xyz


namespace details
{

template <>
struct map_exception_type<sdbusplus::xyz::openbmc_project::User::Account::Password::Error::UpdateFailure>
{
    using type = xyz::openbmc_project::User::Account::Password::UpdateFailure;
};

}

namespace xyz
{
namespace openbmc_project
{
namespace User
{
namespace Account
{
namespace Password
{
namespace _InvalidPassword
{

struct PASSWORD
{
    static constexpr auto str = "PASSWORD=%s";
    static constexpr auto str_short = "PASSWORD";
    using type = std::tuple<std::decay_t<decltype(str)>,const char*>;
    explicit constexpr PASSWORD(const char* a) : _entry(entry(str, a)) {};
    type _entry;
};

}  // namespace _InvalidPassword

struct InvalidPassword
{
    static constexpr auto L = level::ERR;
    using PASSWORD = _InvalidPassword::PASSWORD;
    using metadata_types = std::tuple<PASSWORD>;

};

} // namespace Password
} // namespace Account
} // namespace User
} // namespace openbmc_project
} // namespace xyz


namespace details
{

template <>
struct map_exception_type<sdbusplus::xyz::openbmc_project::User::Account::Password::Error::InvalidPassword>
{
    using type = xyz::openbmc_project::User::Account::Password::InvalidPassword;
};

}

} // namespace logging

} // namespace phosphor
