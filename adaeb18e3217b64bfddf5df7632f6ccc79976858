{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd7975c_f274fa5a",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T02:53:31Z",
      "side": 1,
      "message": "Is there a way we can do a one-time check for which module the system supports, and then we know for the rest of the code which module to use?",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "500d1ddc_6def0087",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-04-05T17:52:04Z",
      "side": 1,
      "message": "Yes, that would be better.  However, pam_tally2 is removed in libpam 1.5.2, so this is a temporary situation.  Sometime after updating OpenBMC to libpam 1.5.2, we can delete support for pam_tally2 from this file.\n\nI did it this way to avoid having to coordinate a cutover to 1.5.2 in multiple repos.",
      "parentUuid": "4dd7975c_f274fa5a",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed1e8747_e9c95605",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T21:44:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "500d1ddc_6def0087",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a00be568_34a62cae",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2023-04-06T10:37:55Z",
      "side": 1,
      "message": "@jason: I think we can take openBMC to move to libpam1.5.2 and we can have only single module to check.\nThere were effort to do the same.\nhttps://gerrit.openbmc.org/c/openbmc/openbmc/+/41357",
      "parentUuid": "ed1e8747_e9c95605",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faa3fd39_79523c3f",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-04-06T20:20:27Z",
      "side": 1,
      "message": "I plan to restart that effort to move to libpam 1.5.2, but it seemed simpler to have phosphor-user-manager support both versions while we work on the transition.  That way we don\u0027t have to coordinate merges in two repos and can keep some time of backward-compatibility.\n\nAfter the transition to libpam 1.5.2 is completed, we can remove the pam_tally2 sections of this code.",
      "parentUuid": "a00be568_34a62cae",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38cd4233_6d4e1320",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-04-13T19:15:16Z",
      "side": 1,
      "message": "Based on feedback and documentation, I got have switched to the conf files for configuration of the faillock and pwquality modules.  After that, it was easier to do as you recommended and just switch directly to the new libpam modules.\n\nThis will need to be coordinated with the upstream commit to move to libpam 1.5.2 which I have not started yet, but plan to start soon.",
      "parentUuid": "faa3fd39_79523c3f",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9cf4bb7_4f96945a",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2023-04-17T18:45:39Z",
      "side": 1,
      "message": "Do you mean to say that enable this change through compile time configuration?",
      "parentUuid": "38cd4233_6d4e1320",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d252b46_b638979e",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 935,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T02:53:31Z",
      "side": 1,
      "message": "It would be cool to just use the PAM library to do this work instead of maintaining 2 complicated string parsing functions based on userspace utilities with no guaranteed format. I think we could do it by creating a temporary PAM stack that just includes the relevant auth line from common-auth (either tally or faillock) and running a pam_authenticate with a dummy password. But since this code is already written, we can leave this for a future improvement.",
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}