{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd7975c_f274fa5a",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T02:53:31Z",
      "side": 1,
      "message": "Is there a way we can do a one-time check for which module the system supports, and then we know for the rest of the code which module to use?",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "500d1ddc_6def0087",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-04-05T17:52:04Z",
      "side": 1,
      "message": "Yes, that would be better.  However, pam_tally2 is removed in libpam 1.5.2, so this is a temporary situation.  Sometime after updating OpenBMC to libpam 1.5.2, we can delete support for pam_tally2 from this file.\n\nI did it this way to avoid having to coordinate a cutover to 1.5.2 in multiple repos.",
      "parentUuid": "4dd7975c_f274fa5a",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed1e8747_e9c95605",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T21:44:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "500d1ddc_6def0087",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a00be568_34a62cae",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2023-04-06T10:37:55Z",
      "side": 1,
      "message": "@jason: I think we can take openBMC to move to libpam1.5.2 and we can have only single module to check.\nThere were effort to do the same.\nhttps://gerrit.openbmc.org/c/openbmc/openbmc/+/41357",
      "parentUuid": "ed1e8747_e9c95605",
      "range": {
        "startLine": 616,
        "startChar": 3,
        "endLine": 619,
        "endChar": 63
      },
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d252b46_b638979e",
        "filename": "user_mgr.cpp",
        "patchSetId": 2
      },
      "lineNbr": 935,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2023-04-05T02:53:31Z",
      "side": 1,
      "message": "It would be cool to just use the PAM library to do this work instead of maintaining 2 complicated string parsing functions based on userspace utilities with no guaranteed format. I think we could do it by creating a temporary PAM stack that just includes the relevant auth line from common-auth (either tally or faillock) and running a pam_authenticate with a dummy password. But since this code is already written, we can leave this for a future improvement.",
      "revId": "adaeb18e3217b64bfddf5df7632f6ccc79976858",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}