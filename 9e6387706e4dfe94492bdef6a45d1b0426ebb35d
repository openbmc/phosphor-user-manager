{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec677af2_2492d0a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-11T21:23:15Z",
      "side": 1,
      "message": "I think \"libs\" is a typo here.\n\nHaving a random file in `/var/lib` certainly doesn\u0027t match our convention.  Please put this under `/var/lib/phosphor-user-manager` at a minimum.\n\nWhy doesn\u0027t this have anything related to MFA in the file name?",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99534a0b_cfa5e3e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-01-16T16:31:03Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ec677af2_2492d0a1",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ed04587_94a2055e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-08T05:48:03Z",
      "side": 1,
      "message": "as written this patch is too complex to tell from the code what it\u0027s trying to accomplish.",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a50e10_a840919b",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-08T05:48:03Z",
      "side": 1,
      "message": "std::format seems like overkill here.  don\u0027t these already have their own types?",
      "range": {
        "startLine": 28,
        "startChar": 32,
        "endLine": 29,
        "endChar": 16
      },
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc14f60b_5ddc1236",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-13T14:48:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "26a50e10_a840919b",
      "range": {
        "startLine": 28,
        "startChar": 32,
        "endLine": 29,
        "endChar": 16
      },
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e20666b_ac8c25ca",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-08T05:48:03Z",
      "side": 1,
      "message": "please don\u0027t write lambdas more than a line or two.",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4fc0f35_115b2316",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-13T14:48:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9e20666b_ac8c25ca",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9bf62be_9ef47084",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:56:00Z",
      "side": 1,
      "message": "Why are you not using the sdbusplus match helpers?",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 29
      },
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33fa7b16_f34c5ed8",
        "filename": "dbus_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-13T14:48:11Z",
      "side": 1,
      "message": "I was not aware of it when I wrote it.",
      "parentUuid": "b9bf62be_9ef47084",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 73,
        "endChar": 29
      },
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b4b9575_7596e28c",
        "filename": "json_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:56:00Z",
      "side": 1,
      "message": "I\u0027m sure this is all super fancy code, but it is completely unreadable and without a single comment as to what it\u0027s purpose even is.\n\nI see you\u0027re doing JSON things.  But you\u0027re not using any of the \"normal\" serialization overloads that nlohmann-json expects.  Why not?\n\nhttps://json.nlohmann.me/features/arbitrary_types/#basic-usage",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7523e998_3a617773",
        "filename": "json_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-08T05:48:03Z",
      "side": 1,
      "message": "+1.  This is a lot of fancy code that honestly could be replaced pretty simply with the Nlohmann struct -\u003e json helpers, or manual code.  Even IF we wrote it all by hand manually, and it was more code, which I\u0027m not sure it would be, it would still be readable.",
      "parentUuid": "0b4b9575_7596e28c",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89091995_5373bd40",
        "filename": "json_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-13T15:55:17Z",
      "side": 1,
      "message": "I have seen lots of repos trying to migrate from one serialisation format to another.Keeping that in mind I thought it would be nicer if we does not expose the underlying sterilisation format to the service object. Putting it behind a serialise/deserialise apis will benefit future format changes. I did not try to invent any new API signature for it. Just wanted follow what has been done in other place (for eg: https://github.com/openbmc/bmcweb/blob/master/redfish-core/include/utils/json_utils.hpp#L698) .\nI know this is an overkill for this repo. But intent is to generalise this and recommend it for a wider usage.   \nSecond idea is, I wanted to avoid spreading serialise calls to all property setter methods. Now if a property need to be serialised, one has to reimplement setter method for it. I thought using Dbus signal notification can be used to do the serialisation in single place(which does not look good at present). Ideally the dbusplus binding code generator can help here. A \u0027serialisable\u0027 meta attribute in the interface definition file for property and a new Serialisable interface can help here. Then the property setter implementation can be modified to check if the object has serialisable interface then call searialise on it by passing the property name and value.",
      "parentUuid": "7523e998_3a617773",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9110e35_d38bb960",
        "filename": "json_serializer.hpp",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-01-16T16:31:03Z",
      "side": 1,
      "message": "\u003e I have seen lots of repos trying to migrate from one serialisation format to another.\n\nWhat examples do you have of this?\n\n\u003e Putting it behind a serialise/deserialise apis will benefit future format changes\n\nI disagree.  If and when that future comes, we can check those patches in.\n\n\n\u003e But intent is to generalise this and recommend it for a wider usage.\n\nPotential future generalization is not justification to make this repo more complicated.  At such time as this gets generalized, PUM can pull in the generalized changes.  In the meantime, please keep this repo simple.",
      "parentUuid": "89091995_5373bd40",
      "revId": "9e6387706e4dfe94492bdef6a45d1b0426ebb35d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}