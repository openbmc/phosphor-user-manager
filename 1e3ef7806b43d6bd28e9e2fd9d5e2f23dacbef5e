{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d5310491_9f6afa9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:21:02Z",
      "side": 1,
      "message": "This code doesn\u0027t seem to even compile.  Is this being worked?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2769652_1bcafde9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-10-30T10:31:27Z",
      "side": 1,
      "message": "Hi Patrick \n\nThis commit CI was failing for D-bus interface change\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/75133\n\nThis commit works with this D-bus interface change",
      "parentUuid": "d5310491_9f6afa9f",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa035cec_dc34f14b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T11:06:24Z",
      "side": 1,
      "message": "You can use the topic-based testing now.  But I\u0027ve also left comments a while ago on the dbus interface.  I replied again now.",
      "parentUuid": "f2769652_1bcafde9",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9430b5ba_84411799",
        "filename": "meson.build",
        "patchSetId": 18
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "`find_library` shouldn\u0027t be used in Meson unless there is absolutely no other option.\n\nPAM supplies `pam.pc`.  You should be able to use the normal `dependency` directive.",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7851f809_fb35f050",
        "filename": "meson.build",
        "patchSetId": 18
      },
      "lineNbr": 81,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "It is inspired from here https://github.com/openbmc/bmcweb/blob/master/meson.build#L199 \nLet me see if I can use dependency directive",
      "parentUuid": "9430b5ba_84411799",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5bc962c_b5784f4c",
        "filename": "meson.build",
        "patchSetId": 18
      },
      "lineNbr": 128,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Why are we doing this by default?  Shouldn\u0027t we have a PACKAGECONFIG / meson-option that controls this?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9be04a9d_85487ad8",
        "filename": "meson.build",
        "patchSetId": 18
      },
      "lineNbr": 128,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d5bc962c_b5784f4c",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7492ecd5_7d0b134b",
        "filename": "mfa_pam",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Let\u0027s organize this file a bit better.  Maybe a `pam` subdirectory?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ae63304_343a53e6",
        "filename": "mfa_pam",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7492ecd5_7d0b134b",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0480eba_662e4c7a",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 34,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Why are we using PAM return codes?  Does PAM require this?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55cb10ed_0fb8cf56",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 34,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "The caller of this api is trying to use pam module and expecting pam errors.",
      "parentUuid": "b0480eba_662e4c7a",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c58d829f_14bfdba7",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "There sure is a lot of casting here.  Do we really want to turn off the linter errors?  This seems like an indication we have poor programming practices.\n\nNot sure why we\u0027re using `reinterpret_cast` instead of `static_cast` here.  This is coming from a `void*`.",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3968589_31214e82",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 93,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "Yes this code is mostly interacting with C based pam apis. Most of the conversation involves opaque void* type.",
      "parentUuid": "c58d829f_14bfdba7",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f96b65e_9685a04a",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 99,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "There isn\u0027t anything clearer here?\n\nWhat is a `make_unique` on an unsized C-array doing??",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 99,
        "endChar": 49
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e9a4767_70206e29",
        "filename": "totp.hpp",
        "patchSetId": 18
      },
      "lineNbr": 99,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T06:23:35Z",
      "side": 1,
      "message": "yeah it looks confusing, but valid code. We could have used  std::unique_ptr\u003cpam_response[]\u003e pamArray(new pam_conv[msgCount]); I just followed how it is being used in bmcweb",
      "parentUuid": "4f96b65e_9685a04a",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 99,
        "endChar": 49
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bb72bad_705b9cc8",
        "filename": "user_mgr.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1545,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "NO!  Absolutely not.  Anything in a \"details\" namespace is meant as a private implementation detail.",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ffa56c0_2b9717be",
        "filename": "user_mgr.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1546,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "static??",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ca4297c_d37c01cd",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "static constexpr?",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 9
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3c60614_afdb5374",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Is there any strong reason to start with a `string_view` on these?  `auto` seems just as reasonable.",
      "range": {
        "startLine": 53,
        "startChar": 10,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07705822_d2986328",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9ca4297c_d37c01cd",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 9
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b05f99_42bfbc4a",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "There is an inconsistency in code review across repos. Someone will say  use auto others say be explicit about types. In this case I prefer being explicit. Don\u0027t know what benefit we get if we use auto.",
      "parentUuid": "d3c60614_afdb5374",
      "range": {
        "startLine": 53,
        "startChar": 10,
        "endLine": 53,
        "endChar": 27
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c340eb09_0a83c0ba",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 206,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "This is C++.  `struct` here isn\u0027t necessary.",
      "range": {
        "startLine": 206,
        "startChar": 4,
        "endLine": 206,
        "endChar": 10
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a6b723f_96c73d04",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 206,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c340eb09_0a83c0ba",
      "range": {
        "startLine": 206,
        "startChar": 4,
        "endLine": 206,
        "endChar": 10
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e1b6ade_02a023af",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 224,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Why are we checking specifically for GoogleAuthenticator here?  That\u0027s surprising.",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 224,
        "endChar": 58
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9cf48a9_ad251284",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 224,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "We started the implementation in very generic way. Both in interface and implementation side(Redfish/Dbus). But we got comments saying that just do it for google authenticator now and that is the most likely supported only mfa in BMC",
      "parentUuid": "1e1b6ade_02a023af",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 224,
        "endChar": 58
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e6dd504_ae7f503c",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 230,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "We really shouldn\u0027t be creating a bunch of new InternalFailures.  This is a dbus anti-pattern.",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe05f29_d9ff11a7",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 230,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "What you suggest? If user calls createSecretKey on MFA disabled system what error we should generate? I believe you had suggestion for not to invent any new error for MFA in the Dbus interface review .",
      "parentUuid": "4e6dd504_ae7f503c",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fbfed29_e836ff25",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "I realize now that you\u0027re returning empty strings all over.  Shouldn\u0027t we give a proper error response to the dbus request?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d58c805_efe2c25b",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "Please say what you have in mind. And how the return value propagated to the caller if there is an elog\u003c...\u003e proceed with it? I could see a pattern in calling side where caller just checks the error_code and returns from there with out reading anything else.",
      "parentUuid": "6fbfed29_e836ff25",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72f43317_54271b1f",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 233,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Again, you\u0027ve specified only Google here in a generic file.  Please organize this more modularly to make life easier for the next person who goes to add a new one.",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5321d5b_926b5cd6",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "This is certainly not an InternalFailure.  This is \"not supported\", right?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6439c979_adef08f8",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "You mean elog\u003cNotSupported\u003e should be used instead?",
      "parentUuid": "c5321d5b_926b5cd6",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3f0e039_42a439ab",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 283,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "I have absolutely no idea why this is in \"verify\" and not in \"createSecretKey\".",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 283,
        "endChar": 59
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820797eb_df9f1093",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 283,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "Hmm. This needs some explanation about the process of generating secret key and commit to it after making sure that the user has already secured it in his authenticator app. \n\nMFA is enabled for a user once a secret key file is generated in users home directory. Once it is present in home directory then there is no going back. User must always supply TOPTP to login. This can create a potential lock out scenario.\nIf the file has been saved in home directory on a generated secret key call and  if user fails to secure the secret key in his mobile app(due to various reasons) then he can no longer login to BMC as he need to supply the TOTP for login.\n\nThis verify OTP path give user two stage process to generated secret key.   \n1) User calls generate secret key -\u003e bmc generate secret key in a tmp file and returns secret string to the user.\n2) User on receiving secret key will capture it in his mobile app.\n3) User will confirm to the BMC that he has secret key secured by calling verify TOTP method by supplying a TOTP generated with the secret key.\n4) BMC on successful verification of the TOTP will commit to the secret key file by moving it to its actual secret key path.",
      "parentUuid": "a3f0e039_42a439ab",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 283,
        "endChar": 59
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feff104e_c74c79d7",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 288,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Don\u0027t use \"what\" in lg2.  It automatically does conversion for exceptions.",
      "range": {
        "startLine": 288,
        "startChar": 64,
        "endLine": 288,
        "endChar": 72
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a46b532c_36642b10",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 288,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "You mean I should remove the {CODE} form the log?",
      "parentUuid": "feff104e_c74c79d7",
      "range": {
        "startLine": 288,
        "startChar": 64,
        "endLine": 288,
        "endChar": 72
      },
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c9c141_0c97b2ed",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 302,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "711cce63_8017afea",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 302,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "We don\u0027t want save any state in DBus. The isSecretKeySetup is derived its value from the presence of google authenticator file in his home directory. Actually isSecretKeySetup need not be a property, it should be a method.",
      "parentUuid": "c6c9c141_0c97b2ed",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a220c87d_53112df4",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 310,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-10-30T10:51:41Z",
      "side": 1,
      "message": "Why not use a map?",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e117ba4_178ea2a6",
        "filename": "users.cpp",
        "patchSetId": 18
      },
      "lineNbr": 310,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-10-31T05:48:21Z",
      "side": 1,
      "message": "Problem is If I use map the question I get is why not array?. May be having a uniform rule across repos will be helpful. The reasoning here for array is that the number of handlers are not going to change runtime. \nA quick check here https://godbolt.org/z/zzPdnozW3 reveals that the code generated is lesser for array. Plus there are some runtime efficiency in indexing array(especially when it is smaller). I don\u0027t have any particular opinion here. If you still want me to change I can change it. But please make sure that there is uniform guide line for it in OpenBmc , otherwise people contributing to multiple repos will get confused by the maintainers opinionated comments.",
      "parentUuid": "a220c87d_53112df4",
      "revId": "1e3ef7806b43d6bd28e9e2fd9d5e2f23dacbef5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}